---
- name: Add shards to router
  delegate_to: "{{ container.hostname }}"
  loop: "{{ container.ids | product(repl_set_svc_pair) | list }}"
  loop_control:
    loop_var: cont_data_pair
    label: "{{ cont_data_pair }}"
  shell: >
    docker exec {{ cont_data_pair.0 }}
    bash -c "echo '
    sh.addShard(\"{{ cont_data_pair.1 }}\");
    sh.status()
    ' | mongosh"
  register: add_shards_result

- debug: msg={{ add_shards_result.results[0].stdout_lines }}

- name: Wait for router to stabilize
  pause:
    seconds: 5

- name: Enable sharding for database {{ database.name }}
  delegate_to: "{{ container.hostname }}"
  loop: "{{ container.ids }}"
  loop_control:
    loop_var: container_id
    label: "{{ container_id }}"
  shell: >
    docker exec {{ container_id }}
    bash -c "echo '
    sh.enableSharding(\"{{ database.name }}\");
    sh.status()
    ' | mongosh"
  register: enable_sharding_result

- debug: msg={{ enable_sharding_result.results[0].stdout_lines }}

- name: Enable sharding for collection {{ database.collection }}
  delegate_to: "{{ container.hostname }}"
  loop: "{{ container.ids }}"
  loop_control:
    loop_var: container_id
    label: "{{ container_id }}"
  shell: >
    docker exec {{ container_id }}
    bash -c "echo '
    sh.shardCollection(\"{{ database.name }}.{{ database.collection }}\", {\"_id\" : \"hashed\"});
    sh.status()
    ' | mongosh"
  register: enable_sharding_col_result

- debug: msg={{ enable_sharding_col_result.results[0].stdout_lines }}
