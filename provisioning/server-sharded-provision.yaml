---
- name: Provision database servers
  hosts: server_hosts
  remote_user: vagrant
  gather_facts: no

  tasks:
    - name: Get list of containers with labels {{ stack.label.repl_set }} and {{ stack.namespace }}
      shell: >
        docker container ls
        --quiet
        --no-trunc
        --filter label={{ stack.label.repl_set }}
        --filter label={{ stack.namespace }}
      delegate_to: "{{ item }}"
      run_once: true
      loop: "{{ groups['servers'] }}"
      register: containers_repl_set
      changed_when:
        - containers_repl_set.stdout_lines | length > 0
      notify: Provision replica sets

    - debug:
        msg:
          server: "{{ item.item }}"
          containers: "{{ item.stdout_lines }}"
      loop: "{{ containers_repl_set.results }}"
      loop_control:
        index_var: idx
        label: "{{ idx }}"

    - name: Flush handlers
      meta: flush_handlers

    - name: Get list of shard services in {{ stack.namespace }}
      shell: >
        docker service ls
        --quiet
        --filter label={{ stack.label.shard }}
        --filter label={{ stack.namespace }}
      changed_when: false
      register: shard_services

    - debug: msg={{ shard_services.stdout_lines }}

    - name: Get replica set and service name pairs
      shell: >
        docker service inspect {{ svc_id }}
        --format '{{ '{{index .Spec.Labels "' ~ stack.label.repl_set  ~ '"}}/{{.Spec.Name}}' }}'
      loop: "{{ shard_services.stdout_lines }}"
      loop_control:
        loop_var: svc_id
      register: replset_service_pair
      changed_when: false

    - debug: msg={{ replset_service_pair.results | map(attribute='stdout') }}

    - name: Get list of containers with labels {{ stack.label.router }} and {{ stack.namespace }}
      shell: >
        docker container ls
        --quiet
        --no-trunc
        --filter label={{ stack.label.router }}
        --filter label={{ stack.namespace }}
      delegate_to: "{{ item }}"
      run_once: true
      loop: "{{ groups['servers'] }}"
      register: containers_router
      changed_when:
        - containers_router.stdout_lines | length > 0
      notify: Provision routers

    - debug:
        msg:
          server: "{{ item.item }}"
          containers: "{{ item.stdout_lines }}"
      loop: "{{ containers_router.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Wait for replica sets to stabilize
      pause:
        seconds: 3

    - name: Flush handlers
      meta: flush_handlers

  handlers:
    - name: Provision replica sets
      include_tasks: tasks/provision/replica-set.yaml
      when:
        - result_item.stdout_lines | length > 0
      loop: "{{ containers_repl_set.results }}"
      loop_control:
        loop_var: result_item
        label: "{{ result_item.item }}"
      vars:
        container:
          hostname: "{{ result_item.item }}"
          ids: "{{ result_item.stdout_lines }}"

    - name: Provision routers
      include_tasks: tasks/provision/router.yaml
      when:
        - result_item.stdout_lines | length > 0
      loop: "{{ containers_router.results }}"
      loop_control:
        loop_var: result_item
        label: "{{ result_item.item }}"
      vars:
        container:
          hostname: "{{ result_item.item }}"
          ids: "{{ result_item.stdout_lines }}"
        repl_set_svc_pair: "{{ replset_service_pair.results | map(attribute='stdout') | list }}"
