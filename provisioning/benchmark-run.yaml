---
- hosts: client_hosts
  remote_user: vagrant
  gather_facts: no

  vars:
    image: ycsb:latest
    network: ycsb-net
    service: ycsb-service

    replicas: 1
    workload: workloadc
    operation_count: 100
    threads: 1
    target: 0
    output_file: /results/run.json

    create_command: >
      docker service create
      --network {{ network }}
      --mode replicated-job
      --replicas {{ replicas }}
      --name {{ service }}
      {{ image }} run mongodb -s
      -P workloads/{{ workload }}
      -p mongodb.url=mongodb://{{ connection_addr }}/{{ database.name }}?w=1
      -p operationcount={{ operation_count }}
      -threads {{ threads }}
      -target {{ target }}
      -p exporter=site.ycsb.measurements.exporter.JSONArrayMeasurementsExporter
      -p exportfile={{ output_file }}

  tasks:
    - name: Assert arguments
      assert:
        that:
          - image | trim | length > 0
          - network | trim | length > 0
          - service | trim | length > 0
          - replicas | int > 0
          - workload | trim | length > 0
          - operation_count | int > 0
          - threads | int > 0
          - target | int >= 0
          - output_file | trim | length > 0

    - name: Get IP address of {{ groups['server_hosts'][0] }}
      shell: getent hosts {{ groups['server_hosts'][0] }} | awk '{print $1}'
      register: connection_addr
      delegate_to: manager
      changed_when: false

    - set_fact:
        connection_addr: "{{ connection_addr.stdout }}:{{ database.connection.port_no }}"

    - debug: var=create_command

    - name: List services
      shell: docker service ls --format {%raw%}'{{.Name}}'{%endraw%}
      changed_when: false
      register: services_result

    - name: List networks
      shell: docker network ls --format {%raw%}'{{.Name}}'{%endraw%}
      changed_when: false
      register: networks_result

    - debug: msg={{ services_result.stdout_lines }}
    - debug: msg={{ networks_result.stdout_lines }}

    - name: Remove service {{ service }} if exists
      when: service in services_result.stdout_lines
      shell: docker service rm {{ service }}

    - name: Create network {{ network }} if does not exist
      when: network not in networks_result.stdout_lines
      shell: docker network create --driver overlay {{ network }}

    - name: Create service {{ service }}
      shell: "{{ create_command }}"

    - name: List {{ service }} tasks
      shell: >
        docker service ps {{ service }}
        --filter desired-state=complete
        --format {%raw%}'<{{.ID}}><{{.Name}}><{{.Node}}>'{%endraw%}
      register: tasks_result_tmp
      changed_when: false

    - name: Parse {{ service }} tasks into a more convenient format
      set_fact:
        tasks_result: >
          {{ tasks_result | default([])
          +
          [{'id': item[0], 'name': item[1], 'node': item[2] }]
          }}
      loop: "{{ tasks_result_tmp.stdout_lines | map('regex_findall', regex) }}"
      loop_control:
        label: "{{ item[1] }}"
      vars:
        regex: "<(.*?)>"

    - debug:
        msg: "Task '{{ item.name }}' on node '{{ item.node }}' with id '{{ item.id }}'"
      loop: "{{ tasks_result }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Get task container
      shell: >
        docker inspect
        --format {%raw%}'{{.Status.ContainerStatus.ContainerID}}'{%endraw%} {{ item.id }}
      loop: "{{ tasks_result }}"
      loop_control:
        label: "{{ item.name }}"
      register: task_containers
      changed_when: false

    - debug:
        msg: >
          Task '{{ item.0.name }}' on node '{{ item.0.node }}'
          uses container with id '{{ item.1.stdout }}'
      loop: "{{ tasks_result | zip(task_containers.results) | list }}"
      loop_control:
        label: "{{ item.0.name }} -> {{ item.1.stdout }}"

    - name: Construct dictionary which maps node to containers
      set_fact:
        f_node_containers: >
          {{
          f_node_containers | default({}) |
          combine({ item.0.node: [item.1.stdout] }, list_merge='append_rp')
          }}
      loop: "{{ tasks_result | zip(task_containers.results) | list }}"
      loop_control:
        label: "{{ item.0.node }}"

    - set_fact:
        f_output_file:
          path: "{{ output_file }}"
          suffix:
            - "{{ replicas }}r"
            - "{{ workload }}"
            - "{{ operation_count }}"
            - "{{ threads }}t"
            - "{{ (target == 0) | ternary('unthrottled', target) }}"

    - debug: var=f_node_containers
    - debug: var=f_output_file

- name: Get UNIX timestamp and result destination path
  hosts: manager
  gather_facts: yes

  tasks:
    - name: Get UNIX timestamp (command)
      command: date +%s%3N
      register: f_timestamp
      changed_when: false

    - set_fact:
        f_timestamp: "{{ f_timestamp.stdout }}"

    - set_fact:
        f_destination: "{{ ansible_env.HOME }}/results"

- hosts: clients
  remote_user: vagrant
  gather_facts: yes

  vars:
    swarm_manager: "{{ groups['client_hosts'][0] }}"
    output_file: "{{ hostvars[swarm_manager]['f_output_file'] }}"
    containers: >
      {{
      (inventory_hostname not in hostvars[swarm_manager]['f_node_containers'])
      |
      ternary([], hostvars[swarm_manager]['f_node_containers'][inventory_hostname])
      }}

    timestamp: "{{ hostvars['manager']['f_timestamp'] }}"
    controller_dest: "{{ hostvars['manager']['f_destination'] }}"
    dest: "{{ ansible_env.HOME }}/results"
    common_suff: "{{ timestamp }}-{{ output_file.suffix | join('-') }}-{{ inventory_hostname }}"

  tasks:
    - debug: var=swarm_manager
    - debug: var=output_file
    - debug: var=containers

    - name: Delete {{ dest }} contents
      when: containers | length > 0
      file:
        path: "{{ dest }}"
        state: "{{ item }}"
      loop:
        - absent
        - directory

    - name: Copy result files from each container
      when: containers | length > 0
      shell: >
        docker cp
        {{ item }}:{{ output_file.path }}
        {{ dest }}/results-{{ common_suff }}.{{ index }}.json
      loop: "{{ containers }}"
      loop_control:
        index_var: index

    - name: Get list of files in {{ dest }}
      when: containers | length > 0
      shell: find {{ dest }} -maxdepth 1 -type f
      register: file_list
      changed_when: false

    - set_fact:
        file_list: "{{ (containers | length > 0) | ternary(file_list.stdout_lines, containers) }}"

    - name: Fetch files from {{ dest }} to controller's {{ controller_dest }}
      when: containers | length > 0
      fetch:
        src: "{{ item }}"
        dest: "{{ controller_dest }}/"
        flat: yes
      loop: "{{ file_list }}"
